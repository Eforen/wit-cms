{
  "name": "wit-cms",
  "description": "A file-based blog-aware content-management system for Express.",
  "version": "2.0.0",
  "author": {
    "name": "Chris Allen Lane",
    "email": "chris@chris-allen-lane.com"
  },
  "dependencies": {
    "async": "0.2.10",
    "json-front-matter": "0.1.4",
    "marked": "0.3.1",
    "moment": "2.5.1",
    "truncatise": "0.0.2"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "0.9.2",
    "grunt-mocha-test": "0.10.0",
    "mocha": "1.18.2",
    "should": "2"
  },
  "keywords": [
    "blog",
    "cms"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/chrisallenlane/wit-cms"
  },
  "main": "index",
  "readme": "wit\n===\n`wit` is a flat-file \"blog aware\" publishing platform for [Express][]. It's\ndesigned for those who want WordPress-like functionality without the heft (and\nattack surface) of a WordPress installation. It emphasizes simplicity,\nsecurity, and performance.\n\n\nOverview\n--------\nPage and post content is declared by creating markdown files within the\nappropriate directories. `wit` will generate everything else automatically,\nincluding:\n\n- routes\n- \"pages\" and \"posts\"\n- tag, category, and archive taxonomies\n- canonical URLs \n- `sitemap.xml`\n- an RSS feed\n- \"read more\" links and pagination\n\nOn application start, `wit` loads all site content into an in-memory object,\nmaking it possible to serve content without reading from disk. This makes it\nrather performant when compared to database-backed content-management systems.\n\n`wit` seeks to offer a compromise between the full-featuredness of WordPress\nand the ultra-minimalism of [Jekyll][], and strives to be a viable alternative\nto those who may be dissatisfied with either.\n\n\nQuick Start\n-----------\nTo install only the `wit` module, run:\n\n`npm install wit-cms`\n\nTo spare yourself the tedium of having to write boilerplate templating,\nhowever, it may be preferable to clone the `wit-bootstrap` repository and\nmodify from there. This is the recommended approach for using `wit`:\n\nhttps://github.com/chrisallenlane/wit-bootstrap\n\n\nCreating Content\n----------------\nIn order to create a \"post\" (a blog entry) or a \"page\" (content that exists\noutside of the blog context), simply create a markdown file of the appropriate\nname, and in the appropriate location. By default, markdown files that source\npage content live in `<app root>/pages/`, and markdown files that source blog\nposts live in `<app root>/posts/`.\n\nPage and post urls will be generated based off of the filename of the\ncorresponding markdown file. For example, the source markdown for a \"Hello\nWorld\" blog post should be saved to `<app root>/posts/hello-world.md`, and its\nURL would be `/blog/post/hello-world`.\n\n\nFront-matter\n------------\nAs with Jekyll, `wit` reads page and post metadata (title, date, author,\ncategories, tags, etc) out of front-matter embedded within each post or page\nvia the [json-front-matter][] module.\n\nFor example, all posts should contain a header like the following:\n\n```javascript\n{{{\n\"title\"      : \"Hello World (of node blogging)\",\n\"author\"     : \"Chris Allen Lane\",\n\"categories\" : [\"node\", \"blogging\"],\n\"tags\"       : [\"javascript\", \"express\"],\n\"date\"       : \"2012-09-15\"\n}}}\n```\nPages will have a similar, but sparser, header: \n\n```javascript\n{{{\n\"title\"      : \"About Me\",\n\"author\"     : \"Chris Allen Lane\"\n}}}\n```\nAll properties specified in front-matter will be made available to the\ncorresponding rendered views as page locals. \n\n\nRoutes\n------\n`wit` automatically generates the following routes:\n\n- `/:pageName`\n- `/blog`\n- `/blog/post/:postName`\n- `/blog/category`\n- `/blog/category/:postName`\n- `/blog/tag`\n- `/blog/tag/:postName`\n- `/blog/archive/:year`\n- `/blog/archive/:year/:month`\n- `/blog/archive/:year/:month/:day`\n\n\nObjects\n-------\n`wit` buffers all site content in a `wit` object on app init, which is\nstructured as follows:\n\n```javascript\nwit {\n  pages      : { /* pages */ },\n  posts      : { /* posts */ },\n  archive    : { /* posts */ },\n  tags       : { /* posts */ },\n  categories : { /* posts */ },\n}\n```\n\nFor example: \n\n```javascript\nwit {\n  pages: {\n    about     : aPageObject,\n    contact   : aPageObject,\n    portfolio : aPageObject,\n  },\n\n  posts: {\n    website-redesign : aPostObject,\n    blogging-in-node : aPostObject,\n    wit-vs-wordpress : aPostObject,\n  },\n\n  archive: {\n    2013: {\n      12: {\n        31: {\n          website-redesign : aPostObject,\n        }\n      }\n    }\n    2014: {\n      01: {\n        07: {\n          blogging-in-node : aPostObject,\n        }\n        14: {\n          wit-vs-wordpress : aPostObject,\n        }\n      }\n    }\n  },\n\n  tags: {\n    meta: {\n      website-redesign : aPostObject,\n    }\n    express: {\n      blogging-in-node : aPostObject,\n      wit-vs-wordpress : aPostObject,\n    }\n  },\n\n  categories: {\n    announcements: {\n      website-redesign : aPostObject,\n    }\n    node: {\n      blogging-in-node : aPostObject,\n      wit-vs-wordpress : aPostObject,\n    }\n  }\n}\n```\n\nWhereby a post object takes the following shape:\n\n```javascript\npost: {\n  title   : 'The Post Name',\n  name    : 'the-post-name',\n  url     : '/blog/post/the-post-name',\n  content : '<p>Rendered markdown content.</p>',\n  date    : {\n    datetime : '2012-09-12T00:00:00-04:00',\n    day      : '02',\n    month    : '04',\n    pretty   : '2 April 2014',\n    unix     : '1396411200',\n    year     : '2014',\n  },\n}\n\n```\n\nAnd a page object takes the following shape:\n\n```javascript\npage: {\n  title   : 'The Page Name',\n  name    : 'the-page-name',\n  url     : '/the-page-name',\n  content : '<p>Rendered markdown content.</p>',\n}\n\n```\n\n\nInitializing\n------------\n`wit` only implements one method - `init()` - which is used to initialize the\napplication. It may be configured and invoked thusly:\n\n```javascript\n\n// ...\n\nvar config = {\n  // site configs\n  site: {\n    author  : 'John Doe',\n    fqdn    : 'https://example.com',\n    name    : 'The Example.com Blog',\n    tagLine : 'An exemplary blog.',\n  },\n  \n  // page configs\n  pages: {\n    // this is the directory from which \"page\" markdown will be read\n    dir: './pages/', \n  },\n\n  // post configs\n  posts: {\n    // this is the directory from which \"page\" markdown will be read\n    dir      : './posts/',\n\n    // knobs regarding auto-excerpting. Excerpts are generating automatically\n    // if a post does not contain a \"<!--more-->\" tag (per the Wordpress\n    //  convention).\n    excerpt  : {\n      length : 1,\n\n      // units may be \"paragraphs\" or \"words\"\n      units  : 'paragraphs',\n    },\n\n    perPage : 5,\n  },\n};\n\n// init the app\nwit.init(app, config, function(err, wit) {\n  // You may continue to modify the express app here before the server starts\n}\n\n// ...\n\n```\n\nNote that aribitrary properties may be attached to the `config.site`\nproperty, and will be made available within templates as page locals. If\n`config.site.foo` was initialized to `\"bar\"`, the value `\"bar\"` would be\naccessible within a page template with `<%= site.foo %>`.\n\n\nSearching\n---------\n`wit` does not currently provide an in-built solution for searching through\nsite content, though it would be capable of doing so with some work. (This is\nsomething that I would like to implement in the future, time-permitting.)\n\nUntil that capability is implemented natively, however, you may consider using\na [Google Custom Search Engine][gcse] instead.\n\n\nCommenting\n----------\nBecause `wit` stores its content in flat files instead of a database, it does\nnot and can not natively support a reader commeting system. If you'd like to\nenable commenting on your blog, consider using a third-party service provider\nlike [Disqus][].\n\n\nSecurity\n--------\n`wit` neither implements administrative access controls, nor requires a\ndatabase back-end. As such, it is immune to many classes of attacks to which\nother content-management systems may be vulnerable.\n\nIt is not \"hack proof\", however. Its attack-surface consists (at least) of:\n\n1. Inputs that write to the DOM (search boxes, URLs, etc)\n2. The attack-surface of Express\n3. The attack-surface of nodejs\n\nWith that said, it is important to use a templating engine (ejs, hogan, etc.)\nwhen authoring views. Likewise - though this should go without saying - the\n`node` application should never be run as `root`.\n\n\nKnown Issues\n------------\n- Due to the way `wit` loads content, page and post names must be unique. I\n  don't anticipate that this will cause problems for most users, and thus am\n  not planning on addressing this issue at this time.\n\n- Unit tests are currently a bit of a farce. I do plan to remedy this in the\n  future as time permits.\n\n\nContributing\n------------\nIf you'd like to contribute to `wit`, please fork its Github repository, make\nyour changes, and submit a pull-request.\n\nPlease note that one of `wit`'s primary advantages is its simplicity and small\ncodebase, so I am not interested in bloating it with \"features\". With that\nsaid, you may wish to contact me before you make modifications if you're\ninterested in seeing your changes merged upstream.\n\nBug fixes will always be accepted.\n\n\nTesting\n-------\nTo run the linter and `wit`'s unit tests (sparse as they are), simply run\n`grunt`.\n\n\nLicense\n-------\n`wit` is released under the MIT license. See `LICENSE.txt` for details. \n\n\n[Disqus]:            http://disqus.com/\n[Express]:           http://expressjs.com/\n[Jekyll]:            http://jekyllrb.com/\n[gcse]:              https://www.google.com/cse/\n[json-front-matter]: https://www.npmjs.org/package/json-front-matter\n[marked]:            https://www.npmjs.org/package/marked\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chrisallenlane/wit-cms/issues"
  },
  "homepage": "https://github.com/chrisallenlane/wit-cms",
  "_id": "wit-cms@1.1.1",
  "dist": {
    "shasum": "94f9e272809ee951117f2fc85f998bfd9ce3d06e"
  },
  "_from": "wit-cms@1.1.1",
  "_resolved": "https://registry.npmjs.org/wit-cms/-/wit-cms-1.1.1.tgz"
}
